// Generated by CoffeeScript 1.6.2
(function() {
  var events, md5, me, util, uuid;

  md5 = require('MD5');

  uuid = require('node-uuid');

  events = require('events');

  util = require('../util');

  me = module.exports = function(app, opts) {
    var Users, auth_success, db, flash, goto_next, mailer, salt, server_path, statics, _ref;

    salt = (_ref = app.get('secret')) != null ? _ref : 'secret-the-cat';
    db = app.get('db');
    mailer = app.get('mailer');
    Users = db.collection('users');
    statics = function(arr) {
      return arr.forEach(function(item) {
        return app.get('/' + item, function(req, res) {
          return res.render(item, {
            req: req
          });
        });
      });
    };
    flash = (require('../util')).flash;
    statics(['signup', 'login', 'reset-password-confirm', 'reset-password-submit']);
    auth_success = function(req, user) {
      req.session.email = user.email;
      req.session.admin = user.admin;
      return req.session.user = user;
    };
    goto_next = function(req, res) {
      return res.redirect(req.query.then || req.body.then || '/');
    };
    app.post("/login", function(req, res) {
      req.body.email = req.body.email.toLowerCase();
      return Users.findOne({
        email: req.body.email,
        $or: [
          {
            password: req.body.password
          }, {
            password: md5(req.body.password + salt)
          }
        ]
      }, function(err, user) {
        if (user) {
          if (!user.confirmed && app.get('email_confirm')) {
            flash(req, 'Please confirm your email address.');
            return res.redirect(req.body.onerror || req.path);
          } else {
            auth_success(req, user);
            flash(req, "success", "You've been logged in.");
            return goto_next(req, res);
          }
        } else {
          flash(req, "error", "Email or password incorrect.");
          return res.redirect(req.body.onerror || req.path);
        }
      });
    });
    app.get("/logout", function(req, res) {
      req.session.email = null;
      req.session.admin = null;
      req.session.user = null;
      flash(req, "success", "You've been safely logged out");
      return goto_next(req, res);
    });
    app.post("/signup", function(req, res) {
      req.body.email = req.body.email.toLowerCase();
      req.body.confirmed = false;
      req.body.email_confirmation_token = uuid.v4();
      if (req.body.email && req.body.password) {
        req.body.password = md5(req.body.password + salt);
        if (!/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(req.body.email)) {
          flash(req, "error", "Invalid email address.");
          return res.render('signup', {
            req: req
          });
        }
        return Users.find({
          email: req.body.email
        }).toArray(function(err, users) {
          if (users.length === 0) {
            return Users.insert(req.body, function(err, user) {
              if (app.get('email_confirm')) {
                flash(req, 'Thanks for signing up! Please follow the instructions in your welcome email.');
              } else {
                auth_success(req, user);
              }
              if (mailer != null) {
                mailer.send_mail({
                  to: user.email,
                  subject: app.get("welcome_email_subject") || "Email Confirmation",
                  body: util.format(app.get("welcome_email"), {
                    first_name: user.first_name || user.email,
                    confirm_link: "http://" + (app.get('host')) + "/confirm_email?token=" + user.email_confirmation_token
                  })
                });
              }
              me.emitter.emit('signup', user);
              return goto_next(req, res);
            });
          } else {
            flash(req, "error", "That user already exists.");
            return res.render('signup', {
              req: req
            });
          }
        });
      } else {
        flash(req, "error", "Please enter a username and password.");
        return res.render('signup', {
          req: req
        });
      }
    });
    server_path = function(req) {
      var url;

      url = req.protocol + "://" + req.host;
      if (req.port && req.port !== 80) {
        url += ":" + req.port;
      }
      return url;
    };
    app.get("/confirm_email", function(req, res) {
      var query;

      if (req.session.email) {
        query = {
          email: req.session.email
        };
      } else {
        query = {
          email_confirmation_token: req.query.token
        };
      }
      return Users.update(query, {
        $set: {
          confirmed: true
        }
      }, function(err) {
        if (err) {
          flash(req, 'error', 'Email confirmation failed');
        } else {
          flash(req, 'success', 'Email confirmed');
        }
        return goto_next(req, res);
      });
    });
    app.post("/reset-password-submit", function(req, res) {
      return Users.findOne({
        email: req.body.email
      }, function(err, user) {
        var token;

        if (user) {
          token = uuid.v4();
          Users.update({
            _id: user._id
          }, {
            $set: {
              password_reset_token: token
            }
          });
          if (mailer != null) {
            mailer.send_mail({
              to: user.email,
              subject: "Password Reset",
              body: "Go here to reset your password: http://" + (app.get('host')) + "/reset-password-confirm?token=" + token
            }, function(err) {
              if (err) {
                return console.error(err);
              }
            });
          }
          flash(req, "success", "You've been sent an email with instructions on resetting your password.");
          return goto_next(req, res);
        } else {
          flash(req, "error", "No user with that email address was found.");
          return res.render('reset-password-submit');
        }
      });
    });
    return app.post("/reset-password-confirm", function(req, res) {
      var query;

      if (req.session.email) {
        query = {
          email: req.session.email
        };
      } else {
        query = {
          password_reset_token: req.query.token
        };
      }
      return Users.update(query, {
        $set: {
          password: req.body.password
        }
      }, function(err) {
        if (err) {
          flash(req, 'error', 'Password reset failed');
        } else {
          flash(req, 'success', 'Password was reset');
        }
        return goto_next(req, res);
      });
    });
  };

  me.emitter = new events.EventEmitter();

}).call(this);
