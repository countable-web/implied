// Generated by CoffeeScript 1.10.0
var express,
  hasProp = {}.hasOwnProperty;

express = require('express');

module.exports = function(app) {
  var mailer, prod_error;
  mailer = app.get('mailer');
  if ((app.get('env')) === "development") {
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  }
  app.set('view options', {
    layout: false
  });
  prod_error = function(opts, callback) {
    return mailer.send_mail({
      subject: "ERROR on " + (app.get('host') || "website") + " - " + opts.title,
      from: app.get('admin_email') || "no-reply@example.com",
      to: [app.get('error_email') || app.get('admin_email')],
      body: opts.message
    }, function(success, message) {
      if (success) {
        return typeof callback === "function" ? callback() : void 0;
      } else {
        console.error("ERROR EMAIL FAILED: ", message);
        return typeof callback === "function" ? callback("ERROR EMAIL FAILED: ", message) : void 0;
      }
    });
  };
  if ((app.get('env')) === "production") {
    app.use(function(err, req, res, next) {
      var k, message, ref, ref1, v;
      message = "Details:\n========\n\n - location : " + req.host + req.originalUrl + " \n - xhr : " + req.xhr;
      message += "\nStack Trace:\n============\n\n" + err.stack + "\n\nRequest:\n========\n\n" + req.method + " " + (req.protocol.toUpperCase()) + "/" + req.httpVersionMajor + "." + req.httpVersionMinor + "\n\n";
      ref = req.headers;
      for (k in ref) {
        if (!hasProp.call(ref, k)) continue;
        v = ref[k];
        message += " - " + k + " : " + v + "\n";
      }
      if (req.session) {
        message += "\nSession:\n========\n";
        ref1 = req.session;
        for (k in ref1) {
          if (!hasProp.call(ref1, k)) continue;
          v = ref1[k];
          message += " - " + k + " : " + v + "\n";
        }
      }
      console.error(message);
      prod_error({
        title: err.name,
        message: message
      });
      return res.render('500');
    });
  }
  return app.get("/client_error", function(req, res) {
    var k, message, ref, v;
    if (!req.query.message) {
      return res.send({
        message: '/client_error: Failed - No error message specified.',
        success: false
      });
    }
    if (req.query.message === 'Script error.') {
      return res.send({
        message: 'CORS errors considered uninteresting.',
        success: false
      });
    }
    message = "DETAILS:\n========\n";
    ref = req.query;
    for (k in ref) {
      if (!hasProp.call(ref, k)) continue;
      v = ref[k];
      message += " - " + k + " : " + v + "\n";
    }
    if (process.env.NODE_ENV === 'production') {
      return prod_error({
        title: "Error Caught on Client",
        message: message
      }, function(err) {
        return res.send({
          success: true
        });
      });
    } else {
      console.error('DEV SITE RECIEVED CLIENT ERROR:', req.query);
      return res.send({
        success: true,
        message: 'Client error ignored because this is a development site.'
      });
    }
  });
};
