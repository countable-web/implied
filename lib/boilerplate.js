// Generated by CoffeeScript 1.10.0
var bodyParser, cookieParser, express, methodOverride, path, serveFavicon, serveStatic, session;

path = require('path');

express = require('express');

bodyParser = require('body-parser');

cookieParser = require('cookie-parser');

methodOverride = require('method-override');

serveStatic = require('serve-static');

serveFavicon = require('serve-favicon');

session = require('express-session');

module.exports = function(app) {
  var helmet, store_opts;
  if (!app.get("upload_dir")) {
    app.set("upload_dir", path.join("/var", app.get("app_name")));
  }
  console.log('setting view engine');
  app.set("view engine", "jade");
  if ((app.get('env')) === 'development') {
    app.locals.pretty = true;
    app.locals.development = true;
  }
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({
    extended: true
  }));
  if (app.get('security_headers') === true) {
    helmet = require('helmet');
    app.use(helmet.xframe());
    app.use(helmet.iexss());
    app.use(helmet.contentTypeOptions());
    app.use(helmet.cacheControl());
  }
  app.use(cookieParser());
  app.set('session_db_name', (app.get('session_db_name')) || 'session');
  console.log('session db', app.get('session_db_name'));
  if (app.get('session_db_name')) {
    store_opts = {
      url: app.get('session_db_name')
    };
  }
  if (app.get('csrf') === true) {
    app.use(express.csrf());
    app.use(function(req, res, next) {
      res.locals.csrf = req.session._csrf;
      return next();
    });
  }
  app.use(methodOverride());
  app.use(function(req, res, next) {
    if (req.query.referrer) {
      req.session.referrer = req.query.referrer;
    }
    return next();
  });
  app.use(serveStatic(path.join(app.get('dir'), 'public')));
  app.use(serveStatic(app.get("upload_dir")));
  app.locals.process = process;
  return app.use(function(req, res, next) {
    res.locals.req = res.locals.request = req;
    return next();
  });
};
