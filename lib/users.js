// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectId, events, md5, me, util, uuid,
    __hasProp = {}.hasOwnProperty;

  md5 = require('MD5');

  uuid = require('node-uuid');

  events = require('events');

  util = require('../util');

  ObjectId = require('mongolian').ObjectId;

  me = module.exports = function(app, opts) {
    var Users, db, flash, goto_error, goto_then, login, login_success, login_url, logout, mailer, salt, server_path, signup, _ref;
    salt = (_ref = app.get('secret')) != null ? _ref : 'secret-the-cat';
    if (!app.get('welcome_email')) {
      app.set('welcome_email', "Thanks for signing up for " + app.get("app_name"));
    }
    db = app.get('db');
    mailer = app.get('mailer');
    Users = db.collection('users');
    login_url = "/login";
    me.staff = function(req, res, next) {
      if (req.session.email) {
        return db.collection('users').findOne({
          email: req.session.email,
          admin: true
        }, function(err, user) {
          if (user) {
            return next();
          } else {
            flash(req, 'error', 'Not authorized.');
            return res.redirect(login_url + "?then=" + req.path);
          }
        });
      } else {
        flash(req, 'error', 'Not authorized.');
        return res.redirect(login_url + "?then=" + req.path);
      }
    };
    flash = (require('../util')).flash;
    goto_then = function(req, res) {
      return res.redirect(req.query.then || req.body.then || '/');
    };
    goto_error = function(req, res) {
      return res.redirect(req.query.onerror || req.body.onerror || req.path);
    };
    login_success = function(req, user) {
      req.session.email = user.email;
      req.session.admin = user.admin;
      req.session.user = user;
      return req.session.cookie.maxAge = 14 * 24 * 60 * 60 * 1000;
    };
    login = function(req, callback) {
      var email, password;
      email = req.param('email');
      password = req.param('password');
      return Users.findOne({
        email: email.replace(" ", "").toLowerCase(),
        $or: [
          {
            password: password
          }, {
            password: md5(password + salt)
          }
        ]
      }, function(err, user) {
        if (user) {
          if (!user.confirmed && app.get('email_confirm')) {
            return callback({
              success: false,
              message: 'Please confirm your email address before logging in.'
            });
          } else {
            login_success(req, user);
            return callback({
              success: true,
              message: 'You have been logged in.'
            });
          }
        } else {
          return callback({
            success: false,
            message: 'Email or password incorrect.'
          });
        }
      });
    };
    signup = function(req, callback) {
      var complete, k, user, v, validator, _ref1, _ref2;
      user = {};
      _ref1 = req.query;
      for (k in _ref1) {
        if (!__hasProp.call(_ref1, k)) continue;
        v = _ref1[k];
        user[k] = v;
      }
      _ref2 = req.body;
      for (k in _ref2) {
        if (!__hasProp.call(_ref2, k)) continue;
        v = _ref2[k];
        user[k] = v;
      }
      user.email = user.email.replace(" ", "").toLowerCase();
      user.confirmed = false;
      user.email_confirmation_token = uuid.v4();
      if (!(user.email && user.password)) {
        callback({
          success: false,
          message: "Please enter a username and password."
        });
      }
      user.password = md5(user.password + salt);
      if (!/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(user.email)) {
        callback({
          success: false,
          message: "Invalid email address."
        });
      }
      complete = function(errs) {
        if (errs && errs.length) {
          callback({
            success: false,
            message: ",".join(errs)
          });
        }
        return Users.find({
          email: user.email
        }).toArray(function(err, users) {
          if (users.length === 0) {
            return Users.insert(user, function(err, user) {
              if (err) {
                return callback({
                  success: false,
                  message: err
                });
              }
              if (mailer != null) {
                mailer.send_mail({
                  to: user.email,
                  subject: app.get("welcome_email_subject") || "Welcome!",
                  body: util.format(app.get("welcome_email"), {
                    first_name: user.first_name || user.email,
                    confirm_link: "http://" + (app.get('host')) + "/confirm_email?token=" + user.email_confirmation_token
                  })
                });
              }
              me.emitter.emit('signup', user);
              if (app.get('email_confirm')) {
                return callback({
                  success: true,
                  message: 'Thanks for signing up! Please follow the instructions in your welcome email.'
                });
              } else {
                login_success(req, user);
                return callback({
                  success: true,
                  message: 'Thanks for signing up!'
                });
              }
            });
          } else {
            return callback({
              success: false,
              message: "That user already exists."
            });
          }
        });
      };
      validator = app.get('user_signup_validator');
      if (validator) {
        return validator(req, complete);
      } else {
        return complete(null);
      }
    };
    logout = function(req) {
      req.session.email = null;
      req.session.admin = null;
      return req.session.user = null;
    };
    app.post("/login", function(req, res) {
      return login(req, function(result) {
        if (result.success) {
          flash(req, "success", result.message);
          return goto_then(req, res);
        } else {
          flash(req, "error", result.message);
          return goto_error(req, res);
        }
      });
      /*
      Users.findOne
        email: req.body.email
        $or: [
          {password: req.body.password}
          {password: md5(req.body.password + salt)}
        ]
      , (err, user)->
        if user
          if not user.confirmed and app.get 'email_confirm'
            flash req, 'error', 'Please confirm your email address.'
            res.redirect req.body.onerror or req.path
          else
            auth_success req, user
            flash req, "success", "You've been logged in."
            goto_then req, res
        else
          flash req, "error", "Email or password incorrect."
          res.redirect req.body.onerror or req.path
      */

    });
    app.get("/logout", function(req, res) {
      logout(req);
      flash(req, "success", "You've been safely logged out");
      return goto_then(req, res);
    });
    app.post("/signup", function(req, res) {
      return signup(req, function(result) {
        if (result.success) {
          flash(req, "success", result.message);
          return goto_then(req, res);
        } else {
          flash(req, "error", result.message);
          return goto_error(req, res);
        }
      });
    });
    app.get("/login.json", function(req, res) {
      return login(req, function(result) {
        return res.send(result);
      });
    });
    app.get("/signup.json", function(req, res) {
      return signup(req, function(result) {
        return res.send(result);
      });
      /*
      req.body.email = req.body.email.toLowerCase()
      req.body.confirmed = false
      req.body.email_confirmation_token = uuid.v4()
      
      if req.body.email and req.body.password
        req.body.password = md5(req.body.password + salt)
      else
        flash req, "error", "Please enter a username and password."
        return res.render 'pages/signup'
      
      # Validate the email address.
      unless /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test req.body.email
        flash req, "error", "Invalid email address."
        return res.render 'pages/signup'
      
      complete = (errs)->
      
        if errs and errs.length
          for err in errs
            flash req, 'error', err
          return res.render 'pages/signup'
      
        # Check if user exists.
        Users.find({email: req.body.email}).toArray (err, users)->
      
          if users.length is 0
            Users.insert req.body, (err, user)->
              # If no confirmation is required, sign the person in.
              if app.get 'email_confirm'
                flash req, 'success', 'Thanks for signing up! Please follow the instructions in your welcome email.'
              else
                login_success req, user
      
              mailer?.send_mail(
                to: user.email
                subject: app.get("welcome_email_subject") or "Welcome!"
                body: util.format app.get("welcome_email"),
                  first_name: user.first_name or user.email
                  confirm_link: "http://" + (app.get 'host') + "/confirm_email?token=" + user.email_confirmation_token
              )
              # User creation event.
              me.emitter.emit 'signup', user
              goto_then req, res
              
          else
            flash req, "error", "That user already exists."
            res.render 'pages/signup'
      
      validator = app.get 'user_signup_validator'
      if validator
        validator req, complete
      else
        complete null
      */

    });
    server_path = function(req) {
      var url;
      url = req.protocol + "://" + req.host;
      if (req.port && req.port !== 80) {
        url += ":" + req.port;
      }
      return url;
    };
    app.get("/confirm_email", function(req, res) {
      var query;
      if (req.session.email) {
        query = {
          email: req.session.email
        };
      } else {
        query = {
          email_confirmation_token: req.query.token
        };
      }
      return Users.update(query, {
        $set: {
          confirmed: true
        }
      }, function(err) {
        if (err) {
          flash(req, 'error', 'Email confirmation failed');
          return goto_then(req, res);
        } else {
          return Users.findOne(query, function(err, user) {
            login_success(req, user);
            if (user) {
              flash(req, 'success', 'Email confirmed');
            }
            return goto_then(req, res);
          });
        }
      });
    });
    app.post("/reset-password-submit", function(req, res) {
      return Users.findOne({
        email: req.body.email
      }, function(err, user) {
        var token;
        if (user) {
          token = uuid.v4();
          Users.update({
            _id: user._id
          }, {
            $set: {
              password_reset_token: token
            }
          });
          if (mailer != null) {
            mailer.send_mail({
              to: user.email,
              subject: "Password Reset",
              body: "Go here to reset your password: http://" + (app.get('host')) + "/reset-password-confirm?token=" + token
            }, function(err) {
              if (err) {
                return console.error(err);
              }
            });
          }
          flash(req, "success", "You've been sent an email with instructions on resetting your password.");
          return goto_then(req, res);
        } else {
          flash(req, "error", "No user with that email address was found.");
          return res.render('pages/reset-password-submit');
        }
      });
    });
    app.post("/reset-password-confirm", function(req, res) {
      var query;
      if (req.session.email) {
        query = {
          email: req.session.email
        };
      } else {
        query = {
          password_reset_token: req.query.token
        };
      }
      return Users.update(query, {
        $set: {
          password: req.body.password
        }
      }, function(err) {
        if (err) {
          flash(req, 'error', 'Password reset failed');
        } else {
          flash(req, 'success', 'Password was reset');
        }
        return goto_then(req, res);
      });
    });
    return app.get("/become-user/:id", me.staff, function(req, res) {
      return Users.findOne({
        _id: new ObjectId(req.params.id)
      }, function(err, user) {
        login_success(req, user);
        return goto_then(req, res);
      });
    });
  };

  me.emitter = new events.EventEmitter();

}).call(this);
