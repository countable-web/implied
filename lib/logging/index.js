// Generated by CoffeeScript 1.6.2
(function() {
  var express,
    __hasProp = {}.hasOwnProperty;

  express = require('express');

  module.exports = function(app) {
    var mailer, prod_error;

    mailer = app.get('mailer');
    app.configure("development", function() {
      return app.use(express.errorHandler({
        dumpExceptions: true,
        showStack: true
      }));
    });
    app.set('view options', {
      layout: false
    });
    prod_error = function(opts, callback) {
      return mailer.send_mail({
        subject: "Error on " + (app.get('host') || "website") + " - " + opts.title,
        from: "errors@mrblisted.ca",
        to: [app.get('error_email')],
        body: opts.message
      }, function(success, message) {
        if (success) {
          return typeof callback === "function" ? callback() : void 0;
        } else {
          console.error("ERROR EMAIL FAILED: ", message);
          return typeof callback === "function" ? callback("ERROR EMAIL FAILED: ", message) : void 0;
        }
      });
    };
    app.configure("production", function() {
      return app.use(function(err, req, res, next) {
        var k, message, v, _ref, _ref1;

        message = "Stack Trace:\n============\n\n" + err.stack + "\n\nRequest:\n========\n\n" + req.method + " " + (req.protocol.toUpperCase()) + "/" + req.httpVersionMajor + "." + req.httpVersionMinor + "\n\n";
        _ref = req.headers;
        for (k in _ref) {
          if (!__hasProp.call(_ref, k)) continue;
          v = _ref[k];
          message += " - " + k + " : " + v + "\n";
        }
        if (req.session) {
          message += "\nSession:\n========\n";
          _ref1 = req.session;
          for (k in _ref1) {
            if (!__hasProp.call(_ref1, k)) continue;
            v = _ref1[k];
            message += " - " + k + " : " + v + "\n";
          }
        }
        console.error(message);
        prod_error({
          title: err.name,
          message: message
        });
        return res.render('500');
      });
    });
    return app.get("/client_error", function(req, res) {
      var k, message, v, _ref;

      if (!req.query.message) {
        return res.send({
          message: '/client_error: Failed - No error message specified.',
          success: false
        });
      }
      message = "DETAILS:\n========\n\n";
      _ref = req.query;
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        message += "- " + k + ": " + v;
      }
      if (process.env.NODE_ENV === 'production') {
        return prod_error({
          title: "Error Caught on Client",
          message: message
        }, function(err) {
          return res.send({
            success: true
          });
        });
      } else {
        console.error('DEV SITE RECIEVED CLIENT ERROR:', req.query);
        return res.send({
          success: true,
          message: 'Client error ignored because this is a development site.'
        });
      }
    });
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
