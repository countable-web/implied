// Generated by CoffeeScript 1.4.0
(function() {
  var $, async, fs;

  $ = require('jquery');

  fs = require('fs');

  async = require('async');

  module.exports = function(opts) {
    var FORMS, NUM_PREVIEWS, PAGE_SIZE, app, common, common_lib, db, process_save, staff;
    common = require("./common")(opts);
    staff = common.staff;
    app = opts.app;
    db = opts.db;
    common_lib = require('../../lib/common');
    PAGE_SIZE = 3;
    NUM_PREVIEWS = 5;
    FORMS = {
      blog: {
        print: 'paths',
        fields: [
          {
            name: 'pub_date'
          }, {
            name: 'name'
          }, {
            name: 'title'
          }, {
            name: 'content',
            type: 'textarea'
          }, {
            name: 'teaser'
          }, {
            name: 'slug_field'
          }
        ]
      }
    };
    app.get("/blog", function(req, res) {
      var filter, pagenum;
      filter = {
        public_visible: 'on'
      };
      if (req.query.category) {
        filter.category = req.query.category;
      }
      pagenum = 1 * (req.query.page || 1);
      return db.collection('blog').find({
        public_visible: 'on'
      }, {
        title: 1,
        image: 1,
        edit_1: 1
      }).sort({
        pub_date: -1
      }).limit(NUM_PREVIEWS).toArray(function(err, blog_teasers) {
        return db.collection('blog').find(filter, {
          title: 1,
          image: 1,
          pub_date: 1,
          teaser: 1,
          edit_1: 1
        }).sort({
          pub_date: -1
        }).skip(PAGE_SIZE * (pagenum - 1)).limit(PAGE_SIZE + 1).toArray(function(err, blog_articles) {
          console.log("These are my blog articles: ", blog_articles[0]);
          return res.render('blog/blog-entries', {
            req: req,
            email: req.session.email,
            blog_articles: blog_articles.slice(0, PAGE_SIZE),
            blog_teasers: blog_teasers,
            blog_page_number: pagenum,
            blog_has_next_page: blog_articles.length > PAGE_SIZE
          });
        });
      });
    });
    app.get("/blog/:id", function(req, res) {
      return db.collection('blog').find({
        public_visible: 'on'
      }, {
        title: 1,
        image: 1
      }).sort({
        pub_date: -1
      }).limit(NUM_PREVIEWS).toArray(function(err, blog_teasers) {
        return db.collection('blog').findOne({
          $or: [
            {
              _id: req.params.id
            }, {
              slug_field: req.params.id
            }
          ]
        }, function(err, entry) {
          if (err) {
            console.log(err);
          }
          return res.render("blog/blog-entry", {
            req: req,
            blog_teasers: blog_teasers,
            email: req.session.email,
            entry: entry
          });
        });
      });
    });
    app.get("/admin/add-blog", staff, function(req, res) {
      return res.render("admin/blog-add", {
        req: req,
        rec: {},
        email: req.session.email,
        images: "",
        category: false
      });
    });
    app.get("/blog-action/subscribe", function(req, res) {
      var subscriber;
      if (req.query.email) {
        subscriber = {
          blog: true,
          email: req.query.email
        };
        return db.collection("subscribers").update(subscriber, subscriber, true, function(err, entry) {
          if (err) {
            console.error(err);
          }
          return res.send({
            success: true
          });
        });
      }
    });
    app.get("/admin/blog", staff, function(req, res) {
      return db.collection('blog').find().sort({
        title: 1
      }).toArray(function(err, entries) {
        return res.render("admin/blog-list", {
          req: req,
          email: req.session.email,
          entries: entries
        });
      });
    });
    app.get("/admin/blog/:id", staff, function(req, res) {
      return db.collection('blog').findOne({
        $or: [
          {
            _id: req.params.id
          }, {
            slug_field: req.params.id
          }
        ]
      }, function(err, rec) {
        return res.render("admin/blog-add", {
          title: req.params.collection,
          req: req,
          form: FORMS['blog'],
          email: req.session.email,
          rec: rec,
          category: rec.category
        });
      });
    });
    process_save = function(req, callback) {
      var convert_img, convert_task_arr, entry, filePath, idx, img, obj_id, pos, save_img, save_task_arr, _i, _len, _ref;
      filePath = opts.upload_dir + "site/blog/";
      entry = req.body;
      save_img = function(args, callback) {
        var newPath;
        console.log("We are saving image: ", args.img_width);
        newPath = filePath + args.img.name;
        return fs.readFile(args.img.path, function(err, data) {
          return fs.writeFile(newPath, data, function(err) {
            if (args.crop) {
              return convert_img({
                name: args.img.name,
                img_width: args.img_width,
                img_height: args.img_height,
                crop: true,
                resize: true,
                orient: true,
                effect: args.effect
              }, callback);
            } else {
              return convert_img({
                name: args.img.name,
                img_width: args.img_width,
                img_height: args.img_height,
                crop: false,
                resize: true,
                orient: true,
                effect: args.effect
              }, callback);
            }
          });
        });
      };
      convert_img = function(args, callback) {
        var auto_orient, convert_commands, crop_img_dim, enhanced_color_toning_effect, enrich_retinex_effect, filmgrain_effect, full_command, newPath, scale_img_dim, screen_coloration_effect, size, stain_glass_effect, thumbPath, turn_effect;
        console.log("We are converting image: ", args.name);
        if (args.name === '' || args.name === void 0 || args.name === 'undefined') {
          return true;
        }
        crop_img_dim = function(w, h) {
          var height, ratio, width;
          ratio = 1.31645569620253;
          width = 0;
          height = 0;
          if (w / h < ratio) {
            width = Math.round(w);
            height = Math.round(w / ratio);
          } else {
            height = Math.round(h);
            width = Math.round(h * ratio);
          }
          return [width, height];
        };
        scale_img_dim = function() {
          var maxH, maxW;
          maxW = 800;
          maxH = 500;
          return " -resize '" + maxW + 'x' + maxH + "' ";
        };
        auto_orient = function() {
          return " -auto-orient ";
        };
        stain_glass_effect = function(filename) {
          return " ./bin/stainedglass -b 150 -t 0 " + filename + " " + filename;
        };
        enhanced_color_toning_effect = function(filename) {
          return " ./bin/colortoning -o 'h,l,a' " + filename + " " + filename + "; ./bin/enhancelab " + filename + " " + filename;
        };
        screen_coloration_effect = function(filename) {
          return " ./bin/screeneffects -s 6 " + filename + " " + filename + "; ./bin/coloration " + filename + " " + filename;
        };
        turn_effect = function(filename) {
          return " ./bin/turn " + filename + " " + filename;
        };
        filmgrain_effect = function(filename) {
          return " ./bin/filmgrain " + filename + " " + filename;
        };
        enrich_retinex_effect = function(filename) {
          return " ./bin/retinex -m HSL -f 50 -c 1.2 " + filename + " " + filename + "; ./bin/enrich " + filename + " " + filename;
        };
        thumbPath = filePath + 'thumb-' + args.name;
        newPath = filePath + args.name;
        convert_commands = '';
        size = [args.img_width, args.img_height];
        if (args.crop) {
          size = crop_img_dim(size[0], size[1]);
          convert_commands += ' -gravity center -crop ' + size[0] + 'x' + size[1] + '+0+0 ';
        }
        if (args.resize) {
          convert_commands += scale_img_dim();
        }
        if (args.orient) {
          convert_commands += auto_orient();
        }
        newPath = '"' + newPath + '"';
        thumbPath = '"' + thumbPath + '"';
        full_command = 'convert ' + newPath + convert_commands + thumbPath;
        full_command += '; ';
        console.log("This is my effect: ", args.effect);
        switch (args.effect) {
          case 'stain_glass':
            full_command += stain_glass_effect(thumbPath);
            break;
          case 'enhanced_color_toning':
            full_command += enhanced_color_toning_effect(thumbPath);
            break;
          case 'screen_coloration':
            full_command += screen_coloration_effect(thumbPath);
            break;
          case 'turn_effect':
            full_command += turn_effect(thumbPath);
            break;
          case 'filmgrain_effect':
            full_command += filmgrain_effect(thumbPath);
            break;
          case 'enrich_retinex':
            full_command += enrich_retinex_effect(thumbPath);
        }
        if (args.effect !== 'none') {
          full_command += ';';
        }
        return require('child_process').exec(full_command, function(error, stdout, stderr) {
          console.log("Executing: ", full_command);
          console.log("stdout: " + stdout);
          if (error !== null) {
            console.log("exec error: " + error);
          }
          if (error || stderr) {
            return callback(null, false);
          } else {
            return callback(null, true);
          }
        });
      };
      obj_id = {
        _id: req.params.id
      };
      entry.content = entry.content.replace(/\r\n/g, '<br>');
      save_task_arr = [];
      convert_task_arr = [];
      idx = 1;
      _ref = ["image", "image2", "image3", "image4", "image5", "image6"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        pos = 'image_' + idx + '_pos';
        if (!(entry[pos] === 'undefined' || entry[pos] === void 0)) {
          if (req.files[img].size !== 0) {
            entry[img] = req.files[img].name;
          } else {
            if (entry[pos] === '1') {
              entry[pos] = "";
            }
            entry[img] = entry["prev_image" + entry[pos]];
            console.log("This is my entry: ", entry[pos]);
            if (req.body['edit_' + idx]) {
              console.log("This is my image: ", entry[img]);
              if (entry[img]) {
                convert_task_arr.push({
                  name: entry[img],
                  img_width: entry['width_' + img],
                  img_height: entry['height_' + img],
                  crop: entry['crop_' + idx],
                  resize: true,
                  orient: true,
                  effect: entry["effects_" + idx]
                });
              }
            }
          }
        }
        idx = idx + 1;
      }
      return common_lib.syscall('mkdir -p ' + filePath, function() {
        var _j, _len1, _ref1;
        idx = 1;
        _ref1 = ["", "2", "3", "4", "5", "6"];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          img = _ref1[_j];
          if (req.files["image" + img].size !== 0) {
            save_task_arr.push({
              img: req.files["image" + img],
              crop: req.body["crop_" + idx],
              img_height: req.body["height_image" + img],
              img_width: req.body["width_image" + img],
              resize: true,
              orient: true,
              effect: req.body['effects_' + idx]
            });
          }
          idx = idx + 1;
        }
        console.log("this is my save_task_arr: ", save_task_arr);
        console.log("this is my convert_task_arr: ", convert_task_arr);
        return async.concatSeries(save_task_arr, save_img, function(err, results) {
          if (err) {
            console.log("We have an Error with saving: ", err);
          } else {
            console.log("We've completed saving successfully! ", results);
          }
          return async.concatSeries(convert_task_arr, convert_img, function(err, results) {
            if (err) {
              console.log("We have an Error with converting: ", err);
            } else {
              console.log("We've completed converting successfully! ", results);
            }
            return callback();
          });
        });
      });
    };
    app.post("/admin/blog/:id", staff, function(req, res) {
      return process_save(req, function() {
        delete req.body._id;
        return db.collection('blog').update({
          _id: req.params.id
        }, req.body, false, function(err) {
          if (err) {
            return res.send({
              success: false,
              error: err
            });
          }
          return res.redirect('/admin/blog');
        });
      });
    });
    app.post("/admin/add-blog", staff, function(req, res) {
      process_save(req);
      if (!req.body.slug_field) {
        return fail('Slug is required.');
      } else {
        req.body._id = req.body.slug_field;
      }
      return db.collection('blog').findOne({
        _id: req.body._id
      }, function(err, entry) {
        if (entry) {
          return fail('Slug is already used.');
        } else {
          return db.collection("blog").insert(req.body, function(err, entry) {
            if (err) {
              console.error(err);
            }
            return res.redirect('/admin/blog');
          });
        }
      });
    });
    return app.get("/admin/blog/:id/delete", staff, function(req, res) {
      return db.collection('blog').remove({
        _id: req.params.id
      }, function(err, rec) {
        return res.redirect("/admin/blog");
      });
    });
  };

}).call(this);
