// Generated by CoffeeScript 1.3.3
(function() {
  var $, async, fs;

  $ = require('jquery');

  fs = require('fs');

  async = require('async');

  module.exports = function(opts) {
    var app, common, common_lib, db, photos, process_save, staff;
    common = require("./common")(opts);
    common_lib = require('../../lib/common');
    photos = require('./photos');
    staff = common.staff;
    app = opts.app;
    db = opts.db;
    process_save = function(req, callback) {
      var entry, filePath, obj_id, save_file, save_task_arr;
      save_file = function(args, callback) {
        var newPath;
        newPath = filePath + args.img.name;
        return fs.readFile(args.img.path, function(err, data) {
          return fs.writeFile(newPath, data, function(err) {
            if (args.type === 'image') {
              return photos.convert_img({
                filePath: filePath,
                name: args.img.name,
                img_width: args.img_width,
                img_height: args.img_height,
                crop: false,
                resize: true,
                orient: true,
                effect: args.effect
              }, callback);
            } else {
              return callback(null, true);
            }
          });
        });
      };
      entry = req.body;
      obj_id = {
        _id: req.params.id
      };
      filePath = opts.upload_dir + "site/videos/";
      entry.content = entry.content.replace(/\r\n/g, '<br>');
      save_task_arr = [];
      return common_lib.syscall('mkdir -p ' + filePath, function() {
        if (req.files.image.size === 0) {
          entry.image = entry.prev_image;
        } else {
          entry.image = req.files.image.name;
          save_task_arr.push({
            filePath: filePath,
            img: req.files["image"],
            type: 'image',
            crop: false,
            resize: true,
            orient: true,
            effect: 'none'
          });
        }
        if (req.files.video.size === 0) {
          entry.video = entry.prev_video;
        } else {
          entry.video = req.files.video.name;
          save_task_arr.push({
            filePath: filePath,
            img: req.files["video"],
            type: 'video'
          });
        }
        console.log("this is my save_task_arr: ", save_task_arr);
        if (save_task_arr.length === 0) {
          return callback();
        }
        return async.concatSeries(save_task_arr, save_file, function(err, results) {
          if (err) {
            console.log("We have an Error with Saving: ", err, results);
          } else {
            console.log("We've completed saving successfully! ", results);
          }
          return callback();
        });
      });
    };
    app.get("/videos", staff, function(req, res) {
      var filter;
      filter = {
        $and: [
          {
            public_visible: 'on'
          }, {
            "keywords": {
              $regex: req.query.search,
              $options: "i"
            }
          }
        ]
      };
      return db.collection('videos').find(filter).sort({
        title: 1
      }).toArray(function(err, video_articles) {
        return res.render('videos/video-entries', {
          req: req,
          email: req.session.email,
          video_articles: video_articles
        });
      });
    });
    app.get("/admin/add-video", staff, function(req, res) {
      return res.render("admin/video-add", {
        req: req,
        rec: {},
        email: req.session.email
      });
    });
    app.post("/admin/add-video", staff, function(req, res) {
      return process_save(req, function() {
        if (!req.body.title) {
          return fail('Title is required.');
        } else {
          req.body._id = req.body.title.toLowerCase().replace(/\s/g, '-');
        }
        return db.collection('videos').findOne({
          _id: req.body._id
        }, function(err, entry) {
          if (entry) {
            return fail('Title is already used.');
          } else {
            return db.collection("videos").insert(req.body, function(err, entry) {
              if (err) {
                console.error(err);
              }
              return res.redirect('/admin/videos');
            });
          }
        });
      });
    });
    app.get("/admin/videos", staff, function(req, res) {
      return db.collection('videos').find().sort({
        title: 1
      }).toArray(function(err, entries) {
        return res.render("admin/video-list", {
          req: req,
          email: req.session.email,
          entries: entries
        });
      });
    });
    app.get("/admin/videos/:id", staff, function(req, res) {
      return db.collection('videos').findOne({
        $or: [
          {
            _id: req.params.id
          }, {
            slug_field: req.params.id
          }
        ]
      }, function(err, rec) {
        return res.render("admin/video-add", {
          title: req.params.collection,
          req: req,
          email: req.session.email,
          rec: rec
        });
      });
    });
    app.post("/admin/videos/:id", staff, function(req, res) {
      return process_save(req, function() {
        delete req.body._id;
        return db.collection('videos').update({
          _id: req.params.id
        }, req.body, false, function(err) {
          if (err) {
            return res.send({
              success: false,
              error: err
            });
          }
          return res.redirect('/admin/videos');
        });
      });
    });
    return app.get("/videos/:id", function(req, res) {
      return db.collection('videos').findOne({
        $or: [
          {
            _id: req.params.id
          }, {
            slug_field: req.params.id
          }
        ]
      }, function(err, entry) {
        if (err) {
          console.log(err);
        }
        return res.render("videos/video-entry", {
          req: req,
          email: req.session.email,
          entry: entry
        });
      });
    });
  };

}).call(this);
